actor Client
participant Server
participant Handler
participant Service
participant DataAccess
database db

entryspacing 0.9
group#43829c #lightblue Registration
Client -> Server: [POST] /user\n{"username":" ", "password":" ", "email":" "}
Server -> Handler: {"username":" ", "password":" ", "email":" "}
Handler -> Service: register(RegisterRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db:Find UserData by username
break User with username already exists
DataAccess --> Service: UserData
Service --> Server: AlreadyTakenException
Server --> Client: 403\n{"message": "Error: username already taken"}
end
DataAccess --> Service: null
Service -> DataAccess:createUser(userData)
DataAccess -> db:Add UserData
Service -> DataAccess:createAuth(authData)
DataAccess -> db:Add AuthData
Service --> Handler: RegisterResult
Handler --> Server: {"username" : " ", "authToken" : " "}
Server --> Client: 200\n{"username" : " ", "authToken" : " "}
end

group#orange #FCEDCA Login
Client -> Server: [POST] /session\n{username, password}
Server -> Handler:{"username":" ", "password":" "}
Handler -> Service: login(LoginRequest)
Service -> DataAccess: getUser(username)
DataAccess -> db: Find UserData by username
break Username did not exist
DataAccess --> Service: null
Service --> Server: BadRequestException
Server --> Client: 400\n"{message": "Error: bad request}"
end
DataAccess --> Service: UserData
break Incorrect password
Service --> Server: UnauthorizedException
Server --> Client: 403\n"{message": "Error: unauthorized}"
end
Service --> Handler:LoginResult
Handler --> Server: {"authToken":" "}
Server --> Client: 200\n{"authToken": " "}

end

group#green #lightgreen Logout
Client -> Server: [DELETE] /session\nauthToken
Server -> Handler: <authToken>
Handler -> Service: logout(LogoutRequest)
Service -> DataAccess: getAuth(authToken)
DataAccess -> db: Find authorization
break did not find authToken
DataAccess --> Service: null
Service --> Server: UnauthorizedException
Server --> Client: 401/n{"message": "Error:unauthorized"}
end
DataAccess --> Service: AuthData
Service -> DataAccess: deleteAuth(authToken)
DataAccess -> db: Delete authorization
DataAccess --> Service: null
Service --> Handler: LogoutResult
Handler --> Server: { }
Server --> Client: 200
end

group#red #pink List Games
Client -> Server: [GET] /game\nauthToken
Server -> Handler: <authToken>
Handler -> Service: getGames(ListGameRequest)
Service -> DataAccess: getAuth(authToken)
DataAccess -> db: Find Authorization
break did not find authToken
DataAccess --> Service: null
Service --> Server: UnauthorizedException
Server --> Client: 401/n{"message": "Error:unauthorized"}
end
DataAccess --> Service: AuthData
Service -> DataAccess: listGames(authToken)
DataAccess -> db: Retrieve all Games
break No games found
DataAccess --> Service: null
Service --> Server: NoGamesException
Server --> Client: 500\n {"message": "No Games Listed"}
end
DataAccess --> Service: GameData
Service --> Handler: ListGameResult
Handler --> Server: [{"gameID": 1234, "whiteUsername":"", "blackUsername":"", "gameName:""} ]
Server --> Client: 200\n{ "games": [{"gameID": 1234, "whiteUsername":"", "blackUsername":"", "gameName:""} ]}
end

group#d790e0 #E3CCE6 Create Game 
Client -> Server: [POST] /game\nauthToken\n{gameName}
Server -> Handler: <authToken>\n{"gameName:" " "}
Handler -> Service: createGame(CreateGameRequest)
Service -> DataAccess: getAuth(authToken)
DataAccess -> db: Find Authorization
break did not find authToken
DataAccess --> Service: null
Service --> Server: UnauthorizedException
Server --> Client: 401/n{"message": "Error:unauthorized"}
end
DataAccess --> Service: AuthData
Service -> DataAccess: createGame(gameData)
DataAccess -> db: Add GameData
Service --> Handler: CreateGameResult
Handler --> Server: {"gameID": 1234}
Server --> Client: 200\n{"gameID" : 1234}
end

group#yellow #lightyellow Join Game #black
Client -> Server: [PUT] /game\nauthToken\n{playerColor, gameID}
Server -> Handler: <authToken>\n{ "playerColor":"WHITE/BLACK", "gameID": 1234 }
Handler -> Service: joinGame(JoinGameRequest)
Service -> DataAccess: getAuth(authToken)
DataAccess -> db: Find Authorization
break did not find authToken
DataAccess --> Service: null
Service --> Server: UnauthorizedException
Server --> Client: 401/n{"message": "Error:unauthorized"}
end
DataAccess --> Service: AuthData
Service -> DataAccess: getGame(gameID)
DataAccess -> db: Find GameData
break did not find game
DataAccess --> Service: null
Service --> Server: BadRequestException
Server --> Client: 400\n{"message": "Error: bad request"}
end
DataAccess --> Service: GameData
break 
Service --> Server: AlreadyTakenException
Server --> Client: 403\n{ "message": "Error: already taken" }
end
Service --> Handler:JoinGameResult
Handler --> Server: { }
Server --> Client: 200\n { }
end

group#gray #lightgray Clear application 
Client -> Server: [DELETE] /db
Server -> Handler: { }
Handler -> Service: clear(ClearRequest)
Service -> DataAccess: clear()
DataAccess -> db: Clear All Data
DataAccess --> Service: null
Service --> Handler: ClearResult
Handler --> Server: { }
Server --> Client: 200
end
